# ===================================================================
# Artemis specific properties
# ===================================================================

artemis:
    encryption-password: <some value you like>
    user-management:
        use-external: false
        internal-admin:
            username: artemis_admin
            password: artemis_admin
        registration:
            enabled: true
            allowed-email-pattern: '.*'
            allowed-email-pattern-readable: 'all'
        course-registration: # the whole section is optional: whether there is a restriction for the self-registration of students in courses
            allowed-username-pattern: '.*'    # example for a TUM identifier, e.g. ab12cde
    version-control:
        url: https://gitlab.christiantiefenau.de
        user: artemis    # e.g. ga12abc
        password: <password for gitlab>
        token: <api token for artemis created in gitlab>                 # VCS API token giving Artemis full Admin access. Not needed for Bamboo+Bitbucket
        ci-token: <ci tokem>   # Token generated by the CI (e.g. Jenkins) for webhooks from the VCS to the CI. Not needed for Bamboo+Bitbucket
        ssh-template-clone-url: ssh://git@bitbucket.ase.in.tum.de:2222/    # Url Stem for cloning via ssh, for gitlab use 'ssh://git@artemistest2gitlab.ase.in.tum.de:2222/'
    continuous-integration:
        user: artemis    # e.g. ga12abc
        password: <password jenkins user>
        url: https://jenkins.christiantiefenau.de
        # Hash/key of the ci-token, equivalent e.g. to the ci-token in version-control
        # Some CI systems, like Jenkins, offer a specific token that gets checked against any incoming notifications
        # from a VCS trying to trigger a build plan. Only if the notification request contains the correct token, the plan
        # is triggered. This can be seen as an alternative to sending an authenticated request to a REST API and then
        # triggering the plan.
        # In the case of Artemis, this is only really needed for the Jenkins + GitLab setup, since the GitLab plugin in
        # Jenkins only allows triggering the Jenkins jobs using such a token. Furthermore, in this case, the value of the
        # hudson.util.Secret is stored in the build plan, so you also have to specify this encrypted string here and NOT the actual token value itself!
        # You can get this by GETting any job.xml for a job with an activated GitLab step and your token value of choice.
        secret-push-token: <secret-push-token>
        # Key of the saved credentials for the VCS service
        # Bamboo: not needed
        # Jenkins: You have to specify the key from the credentials page in Jenkins under which the user and
        #          password for the VCS are stored
        vcs-credentials: <gitlab cred>
        # Key of the credentials for the Artemis notification token
        # Bamboo: not needed
        # Jenkins: You have to specify the key from the credentials page in Jenkins under which the authentication-token is stored
        artemis-authentication-token-key: <artemis-authentication-token-key>
        # The actual value of the notification token to check against in Artemis. This is the token that gets send with
        # every request the CI system makes to Artemis containing a new result after a build.
        # Bamboo: The token value you use for the Server Notification Plugin
        # Jenkins: The token value you use for the Server Notification Plugin and is stored under the notification-token credential above
        artemis-authentication-token-value: <artemis-authentication-token-value>
